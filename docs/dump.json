[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "lib/parsers/gzipDetector.js",
    "content": "/** @ignore */\nconst fs = require('fs-extra')\n/** @ignore */\nconst untildify = require('untildify')\n\n/**\n * @see https://en.wikipedia.org/wiki/Gzip\n * @desc Gizped warc magic num:\n * - Buffer.from('1f8b08', 'hex')\n * - Uint8Array [ 31, 139, 8 ]\n * Not gziped warc magic num:\n * - Uint8Array [ 87, 65, 82 ]\n * Easier to use Uint8Arrays instead of node buffers due to allocation issues ``new Buffer(len)`` is deprecated\n * @type {Uint8Array}\n */\nconst gzipMagicNum = new Uint8Array([0x1F, 0x8B, 0x8])\n\n/**\n * @type {number} length of the gzip magic number header 3 bytes\n */\nconst gzipMagicNumLen = gzipMagicNum.length\n\n/**\n * Utility class that provides the means to detect if a file is gzipped or not\n */\nclass GzipDetector {\n  /**\n   * @desc Determines if a file is gzipped or not by reading its the magic number\n   * @param {string} filePath path to the file to detect\n   * @return {Promise.<boolean>} Promise that resolves to true if the file is gzipped false otherwise\n   * @throws {Error} if the filePath is null or undefined or if another error occurred\n   */\n  static async isGzipped (filePath) {\n    if (filePath === null || filePath === undefined) {\n      throw new Error(`The filePath path is ${filePath}`)\n    }\n    filePath = untildify(filePath)\n    const fd = await fs.open(filePath, 'r')\n    const fillMe = new Uint8Array(3)\n    await fs.read(fd, fillMe, 0, 3, undefined)\n    await fs.close(fd)\n    let i = 0\n    let isGzipped = true\n    // should never happen as we create the Unit8Array to be size 3\n    // but just in case\n    if (gzipMagicNumLen !== fillMe.length) {\n      return false\n    }\n    for (; i < gzipMagicNumLen; ++i) {\n      if (gzipMagicNum[i] !== fillMe[i]) {\n        isGzipped = false\n        break\n      }\n    }\n    return isGzipped\n  }\n\n  /**\n   * @desc Synchronous version of {@link isGzipped}\n   * @param {string} filePath path to the file to detect\n   * @return {boolean} true if the file is gzipped false otherwise\n   * @throws {Error} if the filePath is null or undefined or if another error occurred\n   */\n  static isGzippedSync (filePath) {\n    if (filePath === null || filePath === undefined) {\n      throw new Error(`The filePath path is ${filePath}`)\n    }\n    filePath = untildify(filePath)\n    const fd = fs.openSync(filePath, 'r')\n    const fillMe = new Uint8Array(3)\n    fs.readSync(fd, fillMe, 0, 3, undefined)\n    fs.closeSync(fd)\n    let i = 0\n    let isGzipped = true\n    // should never happen as we create the Unit8Array to be size 3\n    // but just in case\n    if (gzipMagicNumLen !== fillMe.length) {\n      return false\n    }\n    for (; i < gzipMagicNumLen; ++i) {\n      if (gzipMagicNum[i] !== fillMe[i]) {\n        isGzipped = false\n        break\n      }\n    }\n    return isGzipped\n  }\n}\n\nmodule.exports = GzipDetector\n",
    "static": true,
    "longname": "lib/parsers/gzipDetector.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "fs",
    "memberof": "lib/parsers/gzipDetector.js",
    "static": true,
    "longname": "lib/parsers/gzipDetector.js~fs",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/gzipDetector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "untildify",
    "memberof": "lib/parsers/gzipDetector.js",
    "static": true,
    "longname": "lib/parsers/gzipDetector.js~untildify",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/gzipDetector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "gzipMagicNum",
    "memberof": "lib/parsers/gzipDetector.js",
    "static": true,
    "longname": "lib/parsers/gzipDetector.js~gzipMagicNum",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/gzipDetector.js",
    "importStyle": null,
    "description": "Gizped warc magic num:\n- Buffer.from('1f8b08', 'hex')\n- Uint8Array [ 31, 139, 8 ]\nNot gziped warc magic num:\n- Uint8Array [ 87, 65, 82 ]\nEasier to use Uint8Arrays instead of node buffers due to allocation issues ``new Buffer(len)`` is deprecated",
    "see": [
      "https://en.wikipedia.org/wiki/Gzip"
    ],
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "gzipMagicNumLen",
    "memberof": "lib/parsers/gzipDetector.js",
    "static": true,
    "longname": "lib/parsers/gzipDetector.js~gzipMagicNumLen",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/gzipDetector.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 5,
    "kind": "class",
    "name": "GzipDetector",
    "memberof": "lib/parsers/gzipDetector.js",
    "static": true,
    "longname": "lib/parsers/gzipDetector.js~GzipDetector",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/gzipDetector.js",
    "importStyle": null,
    "description": "Utility class that provides the means to detect if a file is gzipped or not",
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 6,
    "kind": "method",
    "name": "isGzipped",
    "memberof": "lib/parsers/gzipDetector.js~GzipDetector",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/parsers/gzipDetector.js~GzipDetector.isGzipped",
    "access": null,
    "description": "Determines if a file is gzipped or not by reading its the magic number",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "path to the file to detect"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<boolean>"
      ],
      "spread": false,
      "description": "Promise that resolves to true if the file is gzipped false otherwise"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the filePath is null or undefined or if another error occurred"
      }
    ]
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "isGzippedSync",
    "memberof": "lib/parsers/gzipDetector.js~GzipDetector",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/parsers/gzipDetector.js~GzipDetector.isGzippedSync",
    "access": null,
    "description": "Synchronous version of {@link isGzipped}",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "path to the file to detect"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the file is gzipped false otherwise"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the filePath is null or undefined or if another error occurred"
      }
    ]
  },
  {
    "__docId__": 8,
    "kind": "file",
    "name": "lib/parsers/index.js",
    "content": "/** @ignore */\nconst EventEmitter = require('eventemitter3')\n/** @ignore */\nconst GzipDetector = require('./gzipDetector')\n/** @ignore */\nconst WARCGzParser = require('./warcGzParser')\n/** @ignore */\nconst WARCParser = require('./warcParser')\n\n/**\n * @desc Parse a WARC file automatically detecting if it is gzipped.\n * See {@link GzipDetector}, {@link WARCGzParser}, {@link WARCParser}\n * @extends {EventEmitter}\n * @example\n *  const parser = new AutoWARCParser('<path-to-warcfile>')\n *  parser.on('record', record => { console.log(record) })\n *  parser.on('done', finalRecord => { console.log(finalRecord) })\n *  parser.on('error', error => { console.error(error) })\n *  parser.start()\n * @example\n *  const parser = new AutoWARCParser()\n *  parser.on('record', record => { console.log(record) })\n *  parser.on('done', finalRecord => { console.log(finalRecord) })\n *  parser.on('error', error => { console.error(error) })\n *  parser.parseWARC('<path-to-warcfile>')\n */\nclass AutoWARCParser extends EventEmitter {\n  /**\n   * @desc Create a new AutoWARCParser\n   * @param {?string} wp path to the warc file tobe parsed\n   */\n  constructor (wp = null) {\n    super()\n    /**\n     * @type {?string} the path to the WARC file to be parsed\n     * @private\n     */\n    this._wp = wp\n\n    /**\n     * @type {boolean} is the parser currently parsing the WARC\n     * @private\n     */\n    this._parsing = false\n\n    /**\n     * @type {?WARCGzParser}\n     * @private\n     */\n    this._gzipParser = null\n\n    /**\n     * @type {?WARCParser}\n     * @private\n     */\n    this._notGzipParser = null\n\n    /** @ignore */\n    this._onRecord = this._onRecord.bind(this)\n    /** @ignore */\n    this._onDone = this._onDone.bind(this)\n    /** @ignore */\n    this._onError = this._onError.bind(this)\n  }\n\n  /**\n   * @desc Begin parsing the WARC file. Once the start method has been called the parser will begin emitting\n   * @emits {record} emitted when the parser has parsed a full record, the argument supplied to the listener will be the parsed record\n   * @emits {done} emitted when the WARC file has been completely parsed, the argument supplied to the listener will be last record\n   * @emits {error} emitted if an exception occurs, the argument supplied to the listener will be the error that occurred.\n   * @return {boolean} indication if the parser has begun or is currently parsing a WARC file\n   * - true: indicates the parser has begun parsing the WARC file true\n   * - false: indicated the parser is currently parsing a WARC file\n   * @throws {Error} if the path to the WARC file is null or undefined or another error occurred\n   */\n  start () {\n    if (!this._parsing) {\n      if (this._wp === null || this._wp === undefined) {\n        throw new Error('The path to the WARC file is undefined')\n      }\n      this._parsing = true\n      let isGzipped = GzipDetector.isGzippedSync(this._wp)\n      return this._getParser(isGzipped).parseWARC(this._wp)\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * @desc Alias for {@link start} except that you can supply the path to the WARC file to be parsed\n   * if one was not supplied via the constructor or to parse another WARC file. If the path to WARC file\n   * to be parsed was supplied via the constructor and you supply a different path to this method.\n   * It will override the one supplied via the constructor\n   * @param {?string} wp the path to the WARC file to be parsed\n   * @return {boolean} indication if the parser has begun or is currently parsing a WARC file\n   * @throws {Error} if the path to the WARC file is null or undefined or another error occurred\n   */\n  parseWARC (wp) {\n    if (!this._parsing) {\n      this._wp = wp || this._wp\n    }\n    return this.start()\n  }\n\n  /**\n   * @desc Lazily create a parser\n   * @param {boolean} isGzipped\n   * @return {WARCGzParser|WARCParser}\n   * @private\n   */\n  _getParser (isGzipped) {\n    if (isGzipped) {\n      if (this._gzipParser === null || this._gzipParser === undefined) {\n        this._gzipParser = new WARCGzParser()\n        this._gzipParser.on('record', this._onRecord)\n        this._gzipParser.on('done', this._onDone)\n        this._gzipParser.on('error', this._onError)\n      }\n      return this._gzipParser\n    } else {\n      if (this._notGzipParser === null || this._notGzipParser === undefined) {\n        this._notGzipParser = new WARCParser()\n        this._notGzipParser.on('record', this._onRecord)\n        this._notGzipParser.on('done', this._onDone)\n        this._notGzipParser.on('error', this._onError)\n      }\n      return this._notGzipParser\n    }\n  }\n\n  /**\n   * @desc Listener for a parsers record event\n   * @param {WARCInfoRecord|WARCMetaDataRecord|WARCRequestRecord|WARCResponseRecord} record\n   * @private\n   */\n  _onRecord (record) {\n    this.emit('record', record)\n  }\n\n  /**\n   * @desc Listener for a parsers done event\n   * @param {WARCInfoRecord|WARCMetaDataRecord|WARCRequestRecord|WARCResponseRecord} finalRecord\n   * @private\n   */\n  _onDone (finalRecord) {\n    this._parsing = false\n    this.emit('done', finalRecord)\n  }\n\n  /**\n   * @desc Listener for a parsers error event\n   * @param {Error} error\n   * @private\n   */\n  _onError (error) {\n    this.emit('error', error)\n  }\n}\n\nmodule.exports = AutoWARCParser\nmodule.exports.WARCGzParser = WARCGzParser\nmodule.exports.WARCParser = WARCParser\n",
    "static": true,
    "longname": "lib/parsers/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "name": "EventEmitter",
    "memberof": "lib/parsers/index.js",
    "static": true,
    "longname": "lib/parsers/index.js~EventEmitter",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "name": "GzipDetector",
    "memberof": "lib/parsers/index.js",
    "static": true,
    "longname": "lib/parsers/index.js~GzipDetector",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "name": "WARCGzParser",
    "memberof": "lib/parsers/index.js",
    "static": true,
    "longname": "lib/parsers/index.js~WARCGzParser",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "name": "WARCParser",
    "memberof": "lib/parsers/index.js",
    "static": true,
    "longname": "lib/parsers/index.js~WARCParser",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "class",
    "name": "AutoWARCParser",
    "memberof": "lib/parsers/index.js",
    "static": true,
    "longname": "lib/parsers/index.js~AutoWARCParser",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/index.js",
    "importStyle": null,
    "description": "Parse a WARC file automatically detecting if it is gzipped.\nSee {@link GzipDetector}, {@link WARCGzParser}, {@link WARCParser}",
    "examples": [
      " const parser = new AutoWARCParser('<path-to-warcfile>')\n parser.on('record', record => { console.log(record) })\n parser.on('done', finalRecord => { console.log(finalRecord) })\n parser.on('error', error => { console.error(error) })\n parser.start()",
      " const parser = new AutoWARCParser()\n parser.on('record', record => { console.log(record) })\n parser.on('done', finalRecord => { console.log(finalRecord) })\n parser.on('error', error => { console.error(error) })\n parser.parseWARC('<path-to-warcfile>')"
    ],
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 14,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#constructor",
    "access": null,
    "description": "Create a new AutoWARCParser",
    "lineNumber": 32,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "wp",
        "description": "path to the warc file tobe parsed"
      }
    ]
  },
  {
    "__docId__": 15,
    "kind": "member",
    "name": "_wp",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_wp",
    "access": "private",
    "description": "",
    "lineNumber": 38,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "name": "_parsing",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_parsing",
    "access": "private",
    "description": "",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "name": "_gzipParser",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_gzipParser",
    "access": "private",
    "description": "",
    "lineNumber": 50,
    "type": {
      "nullable": true,
      "types": [
        "WARCGzParser"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "name": "_notGzipParser",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_notGzipParser",
    "access": "private",
    "description": "",
    "lineNumber": 56,
    "type": {
      "nullable": true,
      "types": [
        "WARCParser"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "_onRecord",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_onRecord",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "_onDone",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_onDone",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "_onError",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_onError",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "name": "start",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#start",
    "access": null,
    "description": "Begin parsing the WARC file. Once the start method has been called the parser will begin emitting",
    "lineNumber": 76,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "indication if the parser has begun or is currently parsing a WARC file\n- true: indicates the parser has begun parsing the WARC file true\n- false: indicated the parser is currently parsing a WARC file"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the path to the WARC file is null or undefined or another error occurred"
      }
    ],
    "emits": [
      {
        "types": [
          "record"
        ],
        "description": "emitted when the parser has parsed a full record, the argument supplied to the listener will be the parsed record"
      },
      {
        "types": [
          "done"
        ],
        "description": "emitted when the WARC file has been completely parsed, the argument supplied to the listener will be last record"
      },
      {
        "types": [
          "error"
        ],
        "description": "emitted if an exception occurs, the argument supplied to the listener will be the error that occurred."
      }
    ]
  },
  {
    "__docId__": 23,
    "kind": "member",
    "name": "_parsing",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_parsing",
    "access": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "name": "parseWARC",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#parseWARC",
    "access": null,
    "description": "Alias for {@link start} except that you can supply the path to the WARC file to be parsed\nif one was not supplied via the constructor or to parse another WARC file. If the path to WARC file\nto be parsed was supplied via the constructor and you supply a different path to this method.\nIt will override the one supplied via the constructor",
    "lineNumber": 98,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "wp",
        "description": "the path to the WARC file to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "indication if the parser has begun or is currently parsing a WARC file"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the path to the WARC file is null or undefined or another error occurred"
      }
    ]
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "_wp",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_wp",
    "access": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "_getParser",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_getParser",
    "access": "private",
    "description": "Lazily create a parser",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isGzipped",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WARCGzParser",
        "WARCParser"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "name": "_gzipParser",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_gzipParser",
    "access": null,
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "name": "_notGzipParser",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_notGzipParser",
    "access": null,
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "_onRecord",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_onRecord",
    "access": "private",
    "description": "Listener for a parsers record event",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "WARCInfoRecord",
          "WARCMetaDataRecord",
          "WARCRequestRecord",
          "WARCResponseRecord"
        ],
        "spread": false,
        "optional": false,
        "name": "record",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "_onDone",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_onDone",
    "access": "private",
    "description": "Listener for a parsers done event",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "WARCInfoRecord",
          "WARCMetaDataRecord",
          "WARCRequestRecord",
          "WARCResponseRecord"
        ],
        "spread": false,
        "optional": false,
        "name": "finalRecord",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 31,
    "kind": "member",
    "name": "_parsing",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_parsing",
    "access": null,
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "_onError",
    "memberof": "lib/parsers/index.js~AutoWARCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/index.js~AutoWARCParser#_onError",
    "access": "private",
    "description": "Listener for a parsers error event",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 33,
    "kind": "file",
    "name": "lib/parsers/warcGzParser.js",
    "content": "/** @ignore */\nconst bsplit = require('binary-split')\n/** @ignore */\nconst untildify = require('untildify')\n/** @ignore */\nconst fs = require('fs-extra')\n/** @ignore */\nconst zlib = require('zlib')\n/** @ignore */\nconst EventEmitter = require('eventemitter3')\n/** @ignore */\nconst WARCRecorderBuilder = require('../warcRecordBuilder')\n/** @ignore */\nconst warcFieldIdentifiers = require('../warcRecordBuilder/fieldIdentifiers')\n\n/**\n * @desc Parse a WARC.gz file\n * @extends {EventEmitter}\n * @example\n *  const parser = new WARCGzParser('<path-to-warcfile>')\n *  parser.on('record', record => { console.log(record) })\n *  parser.on('done', finalRecord => { console.log(finalRecord) })\n *  parser.on('error', error => { console.error(error) })\n *  parser.start()\n * @example\n *  const parser = new WARCGzParser()\n *  parser.on('record', record => { console.log(record) })\n *  parser.on('done', finalRecord => { console.log(finalRecord) })\n *  parser.on('error', error => { console.error(error) })\n *  parser.parseWARC('<path-to-warcfile>')\n */\nclass WARCGzParser extends EventEmitter {\n  /**\n   * @desc Create a new WARCGzParser\n   * @param {?string} wp path to the warc.gz file tobe parsed\n   */\n  constructor (wp = null) {\n    super()\n    /**\n     * @type {?string} the path to the WARC.gz file to be parsed\n     * @private\n     */\n    this._wp = wp\n\n    /**\n     * @type {ReadStream} the underlying ReadStream\n     * @private\n     */\n    this._readStream = null\n\n    /**\n     * @type {boolean} should the parser check the current lines buffer for the warctype\n     * @private\n     */\n    this._checkRecType = false\n\n    /**\n     * @type {boolean} have we identified the records correct WARC-Type for the record\n     * @private\n     */\n    this._foundType = false\n\n    /**\n     * @type {boolean} is the parser just starting to parse the WARC.gz file\n     * @private\n     */\n    this._starting = true\n\n    /**\n     * @type {boolean} is the parser currently parsing the WARC.gz\n     * @private\n     */\n    this._parsing = false\n\n    /**\n     * @type {{count: number, increment: function, reset: function}}\n     * @private\n     */\n    this._crlfCounter = {\n      count: 0,\n      increment () {\n        this.count += 1\n      },\n      reset () {\n        this.count = 0\n      }\n    }\n    /**\n     * @type {WARCRecorderBuilder}\n     * @private\n     */\n    this._builder = new WARCRecorderBuilder()\n  }\n\n  /**\n   * @desc Begin parsing the WARC.gz file. Once the start method has been called the parser will begin emitting\n   * @emits {record} emitted when the parser has parsed a full record, the argument supplied to the listener will be the parsed record\n   * @emits {done} emitted when the WARC.gz file has been completely parsed, the argument supplied to the listener will be last record\n   * @emits {error} emitted if an exception occurs, the argument supplied to the listener will be the error that occurred.\n   * @return {boolean} indication if the parser has begun or is currently parsing a WARC.gz file\n   * - true: indicates the parser has begun parsing the WARC.gz file true\n   * - false: indicated the parser is currently parsing a WARC.gz file\n   * @throws {Error} if the path to the WARC.gz file is null or undefined or another error occurred\n   */\n  start () {\n    if (!this._parsing) {\n      if (this._wp === null || this._wp === undefined) {\n        throw new Error('The path to the WARC file is undefined')\n      }\n      this._starting = true\n      this._parsing = true\n      let lastBegin\n      let buildKey\n      let isEmptyLine\n      this._readStream = fs.createReadStream(untildify(this._wp))\n      this._readStream\n        .pipe(zlib.createGunzip())\n        .pipe(bsplit())\n        .on('data', (line) => {\n          if (warcFieldIdentifiers.begin.equals(line)) {\n            if (!this._starting) {\n              this.emit('record', this._builder.buildRecord(buildKey))\n            } else {\n              this._starting = false\n            }\n            this._crlfCounter.reset()\n            this._checkRecType = true\n            lastBegin = line\n          } else {\n            isEmptyLine = warcFieldIdentifiers.empty.equals(line)\n            if (this._checkRecType && !isEmptyLine) {\n              this._checkRecType = false\n              buildKey = this._builder.determineWarcType(line, lastBegin)\n            } else if (isEmptyLine) {\n              this._crlfCounter.increment()\n            } else {\n              this._builder.addLineTo(buildKey, this._crlfCounter.count, line)\n            }\n          }\n        })\n        .on('error', error => {\n          this.emit('error', error)\n        })\n        .on('end', () => {\n          this._parsing = false\n          this._readStream.destroy()\n          let record = this._builder.buildRecord(buildKey)\n          this._builder.clear()\n          this.emit('done', record)\n        })\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * @desc Alias for {@link start} except that you can supply the path to the WARC.gz file to be parsed\n   * if one was not supplied via the constructor or to parse another WARC.gz file. If the path to WARC.gz file\n   * to be parsed was supplied via the constructor and you supply a different path to this method.\n   * It will override the one supplied via the constructor\n   * @param {?string} wp the path to the WARC.gz file to be parsed\n   * @return {boolean} indication if the parser has begun or is currently parsing a WARC.gz file\n   * @throws {Error} if the path to the WARC.gz file is null or undefined or another error occurred\n   */\n  parseWARC (wp) {\n    if (!this._parsing) {\n      this._wp = wp || this._wp\n    }\n    return this.start()\n  }\n}\n\nmodule.exports = WARCGzParser\n",
    "static": true,
    "longname": "lib/parsers/warcGzParser.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 34,
    "kind": "variable",
    "name": "bsplit",
    "memberof": "lib/parsers/warcGzParser.js",
    "static": true,
    "longname": "lib/parsers/warcGzParser.js~bsplit",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcGzParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "variable",
    "name": "untildify",
    "memberof": "lib/parsers/warcGzParser.js",
    "static": true,
    "longname": "lib/parsers/warcGzParser.js~untildify",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcGzParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "variable",
    "name": "fs",
    "memberof": "lib/parsers/warcGzParser.js",
    "static": true,
    "longname": "lib/parsers/warcGzParser.js~fs",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcGzParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "variable",
    "name": "zlib",
    "memberof": "lib/parsers/warcGzParser.js",
    "static": true,
    "longname": "lib/parsers/warcGzParser.js~zlib",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcGzParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "variable",
    "name": "EventEmitter",
    "memberof": "lib/parsers/warcGzParser.js",
    "static": true,
    "longname": "lib/parsers/warcGzParser.js~EventEmitter",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcGzParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "variable",
    "name": "WARCRecorderBuilder",
    "memberof": "lib/parsers/warcGzParser.js",
    "static": true,
    "longname": "lib/parsers/warcGzParser.js~WARCRecorderBuilder",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcGzParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "variable",
    "name": "warcFieldIdentifiers",
    "memberof": "lib/parsers/warcGzParser.js",
    "static": true,
    "longname": "lib/parsers/warcGzParser.js~warcFieldIdentifiers",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcGzParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "class",
    "name": "WARCGzParser",
    "memberof": "lib/parsers/warcGzParser.js",
    "static": true,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcGzParser.js",
    "importStyle": null,
    "description": "Parse a WARC.gz file",
    "examples": [
      " const parser = new WARCGzParser('<path-to-warcfile>')\n parser.on('record', record => { console.log(record) })\n parser.on('done', finalRecord => { console.log(finalRecord) })\n parser.on('error', error => { console.error(error) })\n parser.start()",
      " const parser = new WARCGzParser()\n parser.on('record', record => { console.log(record) })\n parser.on('done', finalRecord => { console.log(finalRecord) })\n parser.on('error', error => { console.error(error) })\n parser.parseWARC('<path-to-warcfile>')"
    ],
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 42,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#constructor",
    "access": null,
    "description": "Create a new WARCGzParser",
    "lineNumber": 37,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "wp",
        "description": "path to the warc.gz file tobe parsed"
      }
    ]
  },
  {
    "__docId__": 43,
    "kind": "member",
    "name": "_wp",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_wp",
    "access": "private",
    "description": "",
    "lineNumber": 43,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 44,
    "kind": "member",
    "name": "_readStream",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_readStream",
    "access": "private",
    "description": "",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "ReadStream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 45,
    "kind": "member",
    "name": "_checkRecType",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_checkRecType",
    "access": "private",
    "description": "",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "name": "_foundType",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_foundType",
    "access": "private",
    "description": "",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 47,
    "kind": "member",
    "name": "_starting",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_starting",
    "access": "private",
    "description": "",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 48,
    "kind": "member",
    "name": "_parsing",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_parsing",
    "access": "private",
    "description": "",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "name": "_crlfCounter",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_crlfCounter",
    "access": "private",
    "description": "",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "{count: number, increment: function, reset: function}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "count",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#count",
    "access": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "count",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#count",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_builder",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_builder",
    "access": "private",
    "description": "",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "WARCRecorderBuilder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "start",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#start",
    "access": null,
    "description": "Begin parsing the WARC.gz file. Once the start method has been called the parser will begin emitting",
    "lineNumber": 105,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "indication if the parser has begun or is currently parsing a WARC.gz file\n- true: indicates the parser has begun parsing the WARC.gz file true\n- false: indicated the parser is currently parsing a WARC.gz file"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the path to the WARC.gz file is null or undefined or another error occurred"
      }
    ],
    "emits": [
      {
        "types": [
          "record"
        ],
        "description": "emitted when the parser has parsed a full record, the argument supplied to the listener will be the parsed record"
      },
      {
        "types": [
          "done"
        ],
        "description": "emitted when the WARC.gz file has been completely parsed, the argument supplied to the listener will be last record"
      },
      {
        "types": [
          "error"
        ],
        "description": "emitted if an exception occurs, the argument supplied to the listener will be the error that occurred."
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_starting",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_starting",
    "access": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_parsing",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_parsing",
    "access": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_readStream",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_readStream",
    "access": null,
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "_starting",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_starting",
    "access": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "_checkRecType",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_checkRecType",
    "access": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "_checkRecType",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_checkRecType",
    "access": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_parsing",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_parsing",
    "access": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "parseWARC",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#parseWARC",
    "access": null,
    "description": "Alias for {@link start} except that you can supply the path to the WARC.gz file to be parsed\nif one was not supplied via the constructor or to parse another WARC.gz file. If the path to WARC.gz file\nto be parsed was supplied via the constructor and you supply a different path to this method.\nIt will override the one supplied via the constructor",
    "lineNumber": 165,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "wp",
        "description": "the path to the WARC.gz file to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "indication if the parser has begun or is currently parsing a WARC.gz file"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the path to the WARC.gz file is null or undefined or another error occurred"
      }
    ]
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_wp",
    "memberof": "lib/parsers/warcGzParser.js~WARCGzParser",
    "static": false,
    "longname": "lib/parsers/warcGzParser.js~WARCGzParser#_wp",
    "access": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "lib/parsers/warcParser.js",
    "content": "/** @ignore */\nconst bsplit = require('binary-split')\n/** @ignore */\nconst untildify = require('untildify')\n/** @ignore */\nconst fs = require('fs-extra')\n/** @ignore */\nconst EventEmitter = require('eventemitter3')\n/** @ignore */\nconst WARCRecorderBuilder = require('../warcRecordBuilder')\n/** @ignore */\nconst warcFieldIdentifiers = require('../warcRecordBuilder/fieldIdentifiers')\n\n/**\n * @desc Parse a WARC file\n * @extends {EventEmitter}\n * @example\n *  const parser = new WARCParser('<path-to-warcfile>')\n *  parser.on('record', record => { console.log(record) })\n *  parser.on('done', finalRecord => { console.log(finalRecord) })\n *  parser.on('error', error => { console.error(error) })\n *  parser.start()\n * @example\n *  const parser = new WARCParser()\n *  parser.on('record', record => { console.log(record) })\n *  parser.on('done', finalRecord => { console.log(finalRecord) })\n *  parser.on('error', error => { console.error(error) })\n *  parser.parseWARC('<path-to-warcfile>')\n */\nclass WARCParser extends EventEmitter {\n  /**\n   * @desc Create a new WARCParser\n   * @param {?string} wp path to the warc file tobe parsed\n   */\n  constructor (wp = null) {\n    super()\n    /**\n     * @type {?string} the path to the WARC file to be parsed\n     * @private\n     */\n    this._wp = wp\n\n    /**\n     * @type {ReadStream} the underlying ReadStream\n     * @private\n     */\n    this._readStream = null\n\n    /**\n     * @type {boolean} should the parser check the current lines buffer for the warctype\n     * @private\n     */\n    this._checkRecType = false\n\n    /**\n     * @type {boolean} have we identified the records correct WARC-Type for the record\n     * @private\n     */\n    this._foundType = false\n\n    /**\n     * @type {boolean} is the parser just starting to parse the WARC file\n     * @private\n     */\n    this._starting = true\n\n    /**\n     * @type {boolean} is the parser currently parsing the WARC\n     * @private\n     */\n    this._parsing = false\n\n    /**\n     * @type {{count: number, increment: function, reset: function}}\n     * @private\n     */\n    this._crlfCounter = {\n      count: 0,\n      increment () {\n        this.count += 1\n      },\n      reset () {\n        this.count = 0\n      }\n    }\n    /**\n     * @type {WARCRecorderBuilder}\n     * @private\n     */\n    this._builder = new WARCRecorderBuilder()\n  }\n\n  /**\n   * @desc Begin parsing the WARC file. Once the start method has been called the parser will begin emitting\n   * @emits {record} emitted when the parser has parsed a full record, the argument supplied to the listener will be the parsed record\n   * @emits {done} emitted when the WARC file has been completely parsed, the argument supplied to the listener will be last record\n   * @emits {error} emitted if an exception occurs, the argument supplied to the listener will be the error that occurred.\n   * @return {boolean} indication if the parser has begun or is currently parsing a WARC file\n   * - true: indicates the parser has begun parsing the WARC file true\n   * - false: indicated the parser is currently parsing a WARC file\n   * @throws {Error} if the path to the WARC file is null or undefined or another error occurred\n   */\n  start () {\n    if (!this._parsing) {\n      if (this._wp === null || this._wp === undefined) {\n        throw new Error('The path to the WARC file is undefined')\n      }\n      this._starting = true\n      this._parsing = true\n      let lastBegin\n      let buildKey\n      let isEmptyLine\n      this._readStream = fs.createReadStream(untildify(this._wp))\n      this._readStream.pipe(bsplit())\n        .on('data', (line) => {\n          if (warcFieldIdentifiers.begin.equals(line)) {\n            if (!this._starting) {\n              this.emit('record', this._builder.buildRecord(buildKey))\n            } else {\n              this._starting = false\n            }\n            this._crlfCounter.reset()\n            this._checkRecType = true\n            lastBegin = line\n          } else {\n            isEmptyLine = warcFieldIdentifiers.empty.equals(line)\n            if (this._checkRecType && !isEmptyLine) {\n              this._checkRecType = false\n              buildKey = this._builder.determineWarcType(line, lastBegin)\n            } else if (isEmptyLine) {\n              this._crlfCounter.increment()\n            } else {\n              this._builder.addLineTo(buildKey, this._crlfCounter.count, line)\n            }\n          }\n        })\n        .on('error', error => {\n          this.emit('error', error)\n        })\n        .on('end', () => {\n          this._parsing = false\n          this._readStream.destroy()\n          let record = this._builder.buildRecord(buildKey)\n          this._builder.clear()\n          this.emit('done', record)\n        })\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * @desc Alias for {@link start} except that you can supply the path to the WARC file to be parsed\n   * if one was not supplied via the constructor or to parse another WARC file. If the path to WARC file\n   * to be parsed was supplied via the constructor and you supply a different path to this method.\n   * It will override the one supplied via the constructor\n   * @param {?string} wp the path to the WARC file to be parsed\n   * @return {boolean} indication if the parser has begun or is currently parsing a WARC file\n   * @throws {Error} if the path to the WARC file is null or undefined or another error occurred\n   */\n  parseWARC (wp) {\n    if (!this._parsing) {\n      this._wp = wp || this._wp\n    }\n    return this.start()\n  }\n}\n\nmodule.exports = WARCParser\n",
    "static": true,
    "longname": "lib/parsers/warcParser.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "bsplit",
    "memberof": "lib/parsers/warcParser.js",
    "static": true,
    "longname": "lib/parsers/warcParser.js~bsplit",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "untildify",
    "memberof": "lib/parsers/warcParser.js",
    "static": true,
    "longname": "lib/parsers/warcParser.js~untildify",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "fs",
    "memberof": "lib/parsers/warcParser.js",
    "static": true,
    "longname": "lib/parsers/warcParser.js~fs",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "EventEmitter",
    "memberof": "lib/parsers/warcParser.js",
    "static": true,
    "longname": "lib/parsers/warcParser.js~EventEmitter",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "WARCRecorderBuilder",
    "memberof": "lib/parsers/warcParser.js",
    "static": true,
    "longname": "lib/parsers/warcParser.js~WARCRecorderBuilder",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "warcFieldIdentifiers",
    "memberof": "lib/parsers/warcParser.js",
    "static": true,
    "longname": "lib/parsers/warcParser.js~warcFieldIdentifiers",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "WARCParser",
    "memberof": "lib/parsers/warcParser.js",
    "static": true,
    "longname": "lib/parsers/warcParser.js~WARCParser",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/parsers/warcParser.js",
    "importStyle": null,
    "description": "Parse a WARC file",
    "examples": [
      " const parser = new WARCParser('<path-to-warcfile>')\n parser.on('record', record => { console.log(record) })\n parser.on('done', finalRecord => { console.log(finalRecord) })\n parser.on('error', error => { console.error(error) })\n parser.start()",
      " const parser = new WARCParser()\n parser.on('record', record => { console.log(record) })\n parser.on('done', finalRecord => { console.log(finalRecord) })\n parser.on('error', error => { console.error(error) })\n parser.parseWARC('<path-to-warcfile>')"
    ],
    "lineNumber": 30,
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#constructor",
    "access": null,
    "description": "Create a new WARCParser",
    "lineNumber": 35,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "wp",
        "description": "path to the warc file tobe parsed"
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_wp",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_wp",
    "access": "private",
    "description": "",
    "lineNumber": 41,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "_readStream",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_readStream",
    "access": "private",
    "description": "",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "ReadStream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_checkRecType",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_checkRecType",
    "access": "private",
    "description": "",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "_foundType",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_foundType",
    "access": "private",
    "description": "",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "_starting",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_starting",
    "access": "private",
    "description": "",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "_parsing",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_parsing",
    "access": "private",
    "description": "",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "_crlfCounter",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_crlfCounter",
    "access": "private",
    "description": "",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "{count: number, increment: function, reset: function}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "count",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#count",
    "access": null,
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "count",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#count",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "_builder",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_builder",
    "access": "private",
    "description": "",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "WARCRecorderBuilder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "start",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#start",
    "access": null,
    "description": "Begin parsing the WARC file. Once the start method has been called the parser will begin emitting",
    "lineNumber": 103,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "indication if the parser has begun or is currently parsing a WARC file\n- true: indicates the parser has begun parsing the WARC file true\n- false: indicated the parser is currently parsing a WARC file"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the path to the WARC file is null or undefined or another error occurred"
      }
    ],
    "emits": [
      {
        "types": [
          "record"
        ],
        "description": "emitted when the parser has parsed a full record, the argument supplied to the listener will be the parsed record"
      },
      {
        "types": [
          "done"
        ],
        "description": "emitted when the WARC file has been completely parsed, the argument supplied to the listener will be last record"
      },
      {
        "types": [
          "error"
        ],
        "description": "emitted if an exception occurs, the argument supplied to the listener will be the error that occurred."
      }
    ]
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "_starting",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_starting",
    "access": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "_parsing",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_parsing",
    "access": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "_readStream",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_readStream",
    "access": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "_starting",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_starting",
    "access": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "_checkRecType",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_checkRecType",
    "access": null,
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "_checkRecType",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_checkRecType",
    "access": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "_parsing",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_parsing",
    "access": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "parseWARC",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#parseWARC",
    "access": null,
    "description": "Alias for {@link start} except that you can supply the path to the WARC file to be parsed\nif one was not supplied via the constructor or to parse another WARC file. If the path to WARC file\nto be parsed was supplied via the constructor and you supply a different path to this method.\nIt will override the one supplied via the constructor",
    "lineNumber": 161,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "wp",
        "description": "the path to the WARC file to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "indication if the parser has begun or is currently parsing a WARC file"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the path to the WARC file is null or undefined or another error occurred"
      }
    ]
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "_wp",
    "memberof": "lib/parsers/warcParser.js~WARCParser",
    "static": false,
    "longname": "lib/parsers/warcParser.js~WARCParser#_wp",
    "access": null,
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "lib/warcRecordBuilder/buildKeys.js",
    "content": "/**\n * @desc Keys used by {@link WARCRecorderBuilder} to identify which WARC Record is currently being built\n * @type {{builderKeyInfo: Symbol, builderKeyMdata: Symbol, builderKeyReq: Symbol, builderKeyRes: Symbol, builderKeyRev: Symbol,builderKeyResource: Symbol,builderKeyUnknown: Symbol}}\n */\nconst buildKeys = {\n  builderKeyInfo: Symbol('info'),\n  builderKeyMdata: Symbol('mdata'),\n  builderKeyReq: Symbol('req'),\n  builderKeyRes: Symbol('res'),\n  builderKeyRev: Symbol('revisit'),\n  builderKeyResource: Symbol('resource'),\n  builderKeyUnknown: Symbol('unkown')\n}\n\nmodule.exports = buildKeys\n",
    "static": true,
    "longname": "lib/warcRecordBuilder/buildKeys.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "buildKeys",
    "memberof": "lib/warcRecordBuilder/buildKeys.js",
    "static": true,
    "longname": "lib/warcRecordBuilder/buildKeys.js~buildKeys",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecordBuilder/buildKeys.js",
    "importStyle": null,
    "description": "Keys used by {@link WARCRecorderBuilder} to identify which WARC Record is currently being built",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "{builderKeyInfo: Symbol, builderKeyMdata: Symbol, builderKeyReq: Symbol, builderKeyRes: Symbol, builderKeyRev: Symbol,builderKeyResource: Symbol,builderKeyUnknown: Symbol}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "lib/warcRecordBuilder/fieldIdentifiers.js",
    "content": "/**\n * @desc Buffers from hex strings representing the a WARC records WARC-TYPE or record/record-section separator\n * as seen by the parser. Due to the large size of WARC files and the binary data contained within it is more efficient\n * to parse the files contents looking for these sentinels than converting the buffer to an UTF-8 string first\n * @type {{begin: Buffer, info: Buffer, mdata: Buffer, req: Buffer, res: Buffer, revisit: Buffer, crlf: Buffer, empty: Buffer}}\n */\nconst fieldIdentifiers = {\n  begin: Buffer.from('574152432f312e300d', 'hex'),\n  info: Buffer.from('574152432d547970653a2077617263696e666f0d', 'hex'),\n  mdata: Buffer.from('574152432d547970653a206d657461646174610d', 'hex'),\n  req: Buffer.from('574152432d547970653a20726571756573740d', 'hex'),\n  res: Buffer.from('574152432d547970653a20726573706f6e73650d', 'hex'),\n  revisit: Buffer.from('574152432d547970653a20726576697369740d', 'hex'),\n  resource: Buffer.from('574152432d547970653a207265736f757263650d', 'hex'),\n  crlf: Buffer.from('0d0a', 'hex'),\n  empty: Buffer.from('0d', 'hex')\n}\n\nmodule.exports = fieldIdentifiers\n",
    "static": true,
    "longname": "lib/warcRecordBuilder/fieldIdentifiers.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "fieldIdentifiers",
    "memberof": "lib/warcRecordBuilder/fieldIdentifiers.js",
    "static": true,
    "longname": "lib/warcRecordBuilder/fieldIdentifiers.js~fieldIdentifiers",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecordBuilder/fieldIdentifiers.js",
    "importStyle": null,
    "description": "Buffers from hex strings representing the a WARC records WARC-TYPE or record/record-section separator\nas seen by the parser. Due to the large size of WARC files and the binary data contained within it is more efficient\nto parse the files contents looking for these sentinels than converting the buffer to an UTF-8 string first",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "{begin: Buffer, info: Buffer, mdata: Buffer, req: Buffer, res: Buffer, revisit: Buffer, crlf: Buffer, empty: Buffer}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "lib/warcRecordBuilder/index.js",
    "content": "/** @ignore */\nconst {\n  builderKeyInfo,\n  builderKeyMdata,\n  builderKeyReq,\n  builderKeyRes,\n  builderKeyRev,\n  builderKeyResource,\n  builderKeyUnknown\n} = require('./buildKeys')\n/** @ignore */\nconst {\n  WARCInfoRecord,\n  WARCMetaDataRecord,\n  WARCRequestRecord,\n  WARCResponseRecord,\n  WARCRevisitRecord,\n  WARCUnknownRecord,\n  WARCResourceRecord\n} = require('../warcRecords')\n/** @ignore */\nconst warcFieldIdentifiers = require('./fieldIdentifiers')\n\n/**\n * @desc Builds WARC Records by keeping track internally of the current WARC Record WARC-TYPE being parsed\n * by a parser e.g. {@link WARCGzParser}\n */\nclass WARCRecorderBuilder {\n  /**\n   * @desc Construct a new WARCRecorderBuilder\n   */\n  constructor () {\n    /**\n     * @type {?Map}\n     * @private\n     */\n    this._info = null\n\n    /**\n     * @type {?Map}\n     * @private\n     */\n    this._mdata = null\n\n    /**\n     * @type {?Map}\n     * @private\n     */\n    this._req = null\n\n    /**\n     * @type {?Map}\n     * @private\n     */\n    this._res = null\n\n    /**\n     * @type {?Map}\n     * @private\n     */\n    this._rev = null\n\n    /**\n     * @type {?Map}\n     * @private\n     */\n    this._resource = null\n\n    /**\n     * @type {?Map}\n     * @private\n     */\n    this._unkown = null\n  }\n\n  /**\n   * @desc determine the WARC-Type for the record\n   * @param {Buffer} line the WARC-Type line\n   * @param {Buffer} lastBegin the WARC/1.0 line (WARC record begin)\n   * @return {Symbol} the record key that identifies the WARC-Type being parsed\n   * @public\n   */\n  determineWarcType (line, lastBegin) {\n    let foundType = warcFieldIdentifiers.req.equals(line)\n    if (foundType) {\n      return this.initReq(lastBegin, line)\n    } else {\n      foundType = warcFieldIdentifiers.res.equals(line)\n      if (foundType) {\n        return this.initRes(lastBegin, line)\n      } else {\n        foundType = warcFieldIdentifiers.revisit.equals(line)\n        if (foundType) {\n          return this.initRevist(lastBegin, line)\n        } else {\n          foundType = warcFieldIdentifiers.info.equals(line)\n          if (foundType) {\n            return this.initInfo(lastBegin, line)\n          } else {\n            foundType = warcFieldIdentifiers.mdata.equals(line)\n            if (foundType) {\n              return this.initMdata(lastBegin, line)\n            } else {\n              foundType = warcFieldIdentifiers.resource.equals(line)\n              if (foundType) {\n                return this.initResource(lastBegin, line)\n              }\n              // console.log('unknown warc type', line, line.toString())\n              return this.initUnknown(lastBegin, line)\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @desc Begin building WARC-TYPE: warcinfo\n   * @param {Buffer} bgn the WARC/1.0 line\n   * @param {Buffer} line the WARC-TYPE line\n   * @return {Symbol} the internal record key for the warcinfo record currently being built\n   */\n  initInfo (bgn, line) {\n    if (this._info === null) {\n      this._info = new Map()\n    }\n    this._info.clear()\n    this._info.set('header', [bgn, line])\n    this._info.set('content', [])\n    return builderKeyInfo\n  }\n\n  /**\n   * @desc Begin building WARC-TYPE: metadata\n   * @param {Buffer} bgn the WARC/1.0 line\n   * @param {Buffer} line the WARC-TYPE line\n   * @return {Symbol} the internal record key for the metadata record currently being built\n   */\n  initMdata (bgn, line) {\n    if (this._mdata === null) {\n      this._mdata = new Map()\n    }\n    this._mdata.clear()\n    this._mdata.set('header', [bgn, line])\n    this._mdata.set('content', [])\n    return builderKeyMdata\n  }\n\n  /**\n   * @desc Begin building WARC-TYPE: request\n   * @param {Buffer} bgn the WARC/1.0 line\n   * @param {Buffer} line the WARC-TYPE line\n   * @return {Symbol} the internal record key for the request record currently being built\n   */\n  initReq (bgn, line) {\n    if (this._req === null) {\n      this._req = new Map()\n    }\n    this._req.clear()\n    this._req.set('header', [bgn, line])\n    this._req.set('http', [])\n    this._req.set('post', [])\n    return builderKeyReq\n  }\n\n  /**\n   * @desc Begin building WARC-TYPE: response\n   * @param {Buffer} bgn the WARC/1.0 line\n   * @param {Buffer} line the WARC-TYPE line\n   * @return {Symbol} the internal record key for the response record currently being built\n   */\n  initRes (bgn, line) {\n    if (this._res === null) {\n      this._res = new Map()\n    }\n    this._res.clear()\n    this._res.set('header', [bgn, line])\n    this._res.set('http', [])\n    this._res.set('body', [])\n    return builderKeyRes\n  }\n\n  /**\n   * @desc Begin building WARC-TYPE: revisit\n   * @param {Buffer} bgn the WARC/1.0 line\n   * @param {Buffer} line the WARC-TYPE line\n   * @return {Symbol} the internal record key for the revisit record currently being built\n   */\n  initRevist (bgn, line) {\n    if (this._rev === null) {\n      this._rev = new Map()\n    }\n    this._rev.clear()\n    this._rev.set('header', [bgn, line])\n    this._rev.set('http', [])\n    return builderKeyRev\n  }\n\n  /**\n   * @desc Begin building WARC-TYPE: revisit\n   * @param {Buffer} bgn the WARC/1.0 line\n   * @param {Buffer} line the WARC-TYPE line\n   * @return {Symbol} the internal record key for the revisit record currently being built\n   */\n  initUnknown (bgn, line) {\n    if (this._unkown === null) {\n      this._unkown = new Map()\n    }\n    this._unkown.clear()\n    this._unkown.set('header', [bgn, line])\n    return builderKeyUnknown\n  }\n\n  /**\n   * @desc Begin building WARC-TYPE: resource\n   * @param {Buffer} bgn the WARC/1.0 line\n   * @param {Buffer} line the WARC-TYPE line\n   * @return {Symbol} the internal record key for the resource record currently being built\n   */\n  initResource (bgn, line) {\n    if (this._resource === null) {\n      this._resource = new Map()\n    }\n    this._resource.clear()\n    this._resource.set('header', [bgn, line])\n    this._resource.set('content', [])\n    return builderKeyResource\n  }\n\n  /**\n   * @desc Add the current line being parsed to a record currently being built\n   * @param {Symbol} key the internal record key for the response record currently being built exposed by\n   * {@link initInfo}, {@link initMdata}, {@link initRes} and {@link initReq}\n   * @param {number} ctrlfCount the current count of Control LineFeeds between WARC Record parts\n   * @param {Buffer} line the current line being parsed\n   */\n  addLineTo (key, ctrlfCount, line) {\n    switch (key) {\n      case builderKeyInfo:\n        this._addInfoLine(ctrlfCount, line)\n        break\n      case builderKeyMdata:\n        this._addMdataLine(ctrlfCount, line)\n        break\n      case builderKeyReq:\n        this._addReqLine(ctrlfCount, line)\n        break\n      case builderKeyRes:\n        this._addResLine(ctrlfCount, line)\n        break\n      case builderKeyRev:\n        this._addRevLine(ctrlfCount, line)\n        break\n      case builderKeyResource:\n        this._addResourceLine(ctrlfCount, line)\n        break\n      case builderKeyUnknown:\n        this._addUnkownLine(ctrlfCount, line)\n        break\n    }\n  }\n\n  /**\n   * @desc Build the record currently being parsed\n   * @param {Symbol} key the internal record key for the response record currently being built exposed by\n   * {@link initInfo}, {@link initMdata}, {@link initRes} and {@link initReq}\n   * @return {WARCInfoRecord|WARCMetaDataRecord|WARCRequestRecord|WARCResponseRecord|WARCRevisitRecord|WARCUnknownRecord} based off the ``key`` supplied to\n   * this method\n   */\n  buildRecord (key) {\n    let record\n    switch (key) {\n      case builderKeyInfo:\n        record = new WARCInfoRecord(...this._info.values())\n        this._info.clear()\n        break\n      case builderKeyMdata:\n        record = new WARCMetaDataRecord(...this._mdata.values())\n        this._mdata.clear()\n        break\n      case builderKeyReq:\n        record = new WARCRequestRecord(...this._req.values())\n        this._req.clear()\n        break\n      case builderKeyRes:\n        record = new WARCResponseRecord(...this._res.values())\n        this._res.clear()\n        break\n      case builderKeyRev:\n        record = new WARCRevisitRecord(...this._rev.values())\n        this._rev.clear()\n        break\n      case builderKeyResource:\n        record = new WARCResourceRecord(...this._resource.values())\n        this._resource.clear()\n        break\n      case builderKeyUnknown:\n        record = this._attemptCorrection()\n        this._unkown.clear()\n        break\n    }\n    return record\n  }\n\n  _attemptCorrection () {\n    let headers = this._unkown.get('header')\n    let len = headers.length\n    let i = 0\n    for (; i < len; ++i) {\n      if (warcFieldIdentifiers.req.equals(headers[i])) {\n        return new WARCRequestRecord(...this._unkown.values())\n      }\n\n      if (warcFieldIdentifiers.res.equals(headers[i])) {\n        return new WARCResponseRecord(...this._unkown.values())\n      }\n\n      if (warcFieldIdentifiers.info.equals(headers[i])) {\n        return new WARCInfoRecord(...this._unkown.values())\n      }\n\n      if (warcFieldIdentifiers.revisit.equals(headers[i])) {\n        return new WARCRevisitRecord(...this._unkown.values())\n      }\n\n      if (warcFieldIdentifiers.mdata.equals(headers[i])) {\n        return new WARCMetaDataRecord(...this._unkown.values())\n      }\n\n      if (warcFieldIdentifiers.resource.equals(headers[i])) {\n        return new WARCResourceRecord(...this._unkown.values())\n      }\n    }\n\n    // console.log('found nothing', this._unkown)\n    // ;[...this._unkown.values()].forEach(it => {\n    //   it.forEach(it2 => {\n    //     console.log(it2.toString())\n    //   })\n    //   console.log('--------------')\n    // })\n    return new WARCUnknownRecord(...this._unkown.values())\n  }\n\n  /**\n   * @desc Clears the builders internals. Do not call this functions unless parsing has completely finished\n   * this will completely remove all information pertaining to building of the current WARC Record.\n   * This method is intended to be used by the WARC parsers.\n   */\n  clear () {\n    if (this._info) {\n      this._info.clear()\n    }\n    if (this._mdata) {\n      this._mdata.clear()\n    }\n    if (this._req) {\n      this._req.clear()\n    }\n    if (this._res) {\n      this._res.clear()\n    }\n    if (this._rev) {\n      this._rev.clear()\n    }\n    if (this._resource) {\n      this._resource.clear()\n    }\n    if (this._unkown) {\n      this._unkown.clear()\n    }\n  }\n\n  /**\n   * @desc Adds the line to the correct WARC record section for warcinfo\n   * @param {number} ctrlfCount the current count of Control LineFeeds between WARC Record parts\n   * @param {Buffer} line the current line being parsed\n   * @private\n   */\n  _addInfoLine (ctrlfCount, line) {\n    if (ctrlfCount === 0) {\n      this._info.get('header').push(line)\n    } else if (ctrlfCount === 1) {\n      this._info.get('content').push(line)\n    }\n  }\n\n  /**\n   * @desc Adds the line to the correct WARC record section for metadata\n   * @param {number} ctrlfCount the current count of Control LineFeeds between WARC Record parts\n   * @param {Buffer} line the current line being parsed\n   * @private\n   */\n  _addMdataLine (ctrlfCount, line) {\n    if (ctrlfCount === 0) {\n      this._mdata.get('header').push(line)\n    } else if (ctrlfCount === 1) {\n      this._mdata.get('content').push(line)\n    }\n  }\n\n  /**\n   * @desc Adds the line to the correct WARC record section for request\n   * @param {number} ctrlfCount the current count of Control LineFeeds between WARC Record parts\n   * @param {Buffer} line the current line being parsed\n   * @private\n   */\n  _addReqLine (ctrlfCount, line) {\n    if (ctrlfCount === 0) {\n      this._req.get('header').push(line)\n    } else if (ctrlfCount === 1) {\n      this._req.get('http').push(line)\n    } else if (ctrlfCount === 2) {\n      this._req.get('post').push(line)\n    }\n  }\n\n  /**\n   * @desc Adds the line to the correct WARC record section for response\n   * @param {number} ctrlfCount the current count of Control LineFeeds between WARC Record parts\n   * @param {Buffer} line the current line being parsed\n   * @private\n   */\n  _addResLine (ctrlfCount, line) {\n    if (ctrlfCount === 0) {\n      this._res.get('header').push(line)\n    } else if (ctrlfCount === 1) {\n      this._res.get('http').push(line)\n    } else if (ctrlfCount === 2) {\n      this._res.get('body').push(line)\n    }\n  }\n\n  /**\n   * @desc Adds the line to the correct WARC record section for revisit\n   * @param {number} ctrlfCount the current count of Control LineFeeds between WARC Record parts\n   * @param {Buffer} line the current line being parsed\n   * @private\n   */\n  _addRevLine (ctrlfCount, line) {\n    if (ctrlfCount === 0) {\n      this._rev.get('header').push(line)\n    } else if (ctrlfCount === 1) {\n      this._rev.get('http').push(line)\n    }\n  }\n\n  /**\n   * @desc Adds the line to the correct section for an ``unknown`` record\n   * @param {number} ctrlfCount the current count of Control LineFeeds between WARC Record parts\n   * @param {Buffer} line the current line being parsed\n   * @private\n   */\n  _addUnkownLine (ctrlfCount, line) {\n    if (ctrlfCount === 0) {\n      this._unkown.get('header').push(line)\n    } else {\n      if (!this._unkown.has(ctrlfCount)) {\n        this._unkown.set(ctrlfCount, [])\n      }\n      this._unkown.get(ctrlfCount).push(line)\n    }\n  }\n\n  /**\n   * @desc Adds the line to the correct WARC record section for resource\n   * @param {number} ctrlfCount the current count of Control LineFeeds between WARC Record parts\n   * @param {Buffer} line the current line being parsed\n   * @private\n   */\n  _addResourceLine (ctrlfCount, line) {\n    if (ctrlfCount === 0) {\n      this._resource.get('header').push(line)\n    } else if (ctrlfCount === 1) {\n      this._resource.get('content').push(line)\n    }\n  }\n}\n\nmodule.exports = WARCRecorderBuilder\n",
    "static": true,
    "longname": "lib/warcRecordBuilder/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "builderKeyInfo",
    "memberof": "lib/warcRecordBuilder/index.js",
    "static": true,
    "longname": "lib/warcRecordBuilder/index.js~builderKeyInfo",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecordBuilder/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "WARCInfoRecord",
    "memberof": "lib/warcRecordBuilder/index.js",
    "static": true,
    "longname": "lib/warcRecordBuilder/index.js~WARCInfoRecord",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecordBuilder/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "warcFieldIdentifiers",
    "memberof": "lib/warcRecordBuilder/index.js",
    "static": true,
    "longname": "lib/warcRecordBuilder/index.js~warcFieldIdentifiers",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecordBuilder/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "WARCRecorderBuilder",
    "memberof": "lib/warcRecordBuilder/index.js",
    "static": true,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecordBuilder/index.js",
    "importStyle": null,
    "description": "Builds WARC Records by keeping track internally of the current WARC Record WARC-TYPE being parsed\nby a parser e.g. {@link WARCGzParser}",
    "lineNumber": 28,
    "interface": false
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#constructor",
    "access": null,
    "description": "Construct a new WARCRecorderBuilder",
    "lineNumber": 32,
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "_info",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_info",
    "access": "private",
    "description": "",
    "lineNumber": 37,
    "type": {
      "nullable": true,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "_mdata",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_mdata",
    "access": "private",
    "description": "",
    "lineNumber": 43,
    "type": {
      "nullable": true,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "_req",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_req",
    "access": "private",
    "description": "",
    "lineNumber": 49,
    "type": {
      "nullable": true,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "_res",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_res",
    "access": "private",
    "description": "",
    "lineNumber": 55,
    "type": {
      "nullable": true,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "_rev",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_rev",
    "access": "private",
    "description": "",
    "lineNumber": 61,
    "type": {
      "nullable": true,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "_resource",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_resource",
    "access": "private",
    "description": "",
    "lineNumber": 67,
    "type": {
      "nullable": true,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "_unkown",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_unkown",
    "access": "private",
    "description": "",
    "lineNumber": 73,
    "type": {
      "nullable": true,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "determineWarcType",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#determineWarcType",
    "access": "public",
    "description": "determine the WARC-Type for the record",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the WARC-Type line"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "lastBegin",
        "description": "the WARC/1.0 line (WARC record begin)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "the record key that identifies the WARC-Type being parsed"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "initInfo",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#initInfo",
    "access": null,
    "description": "Begin building WARC-TYPE: warcinfo",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "bgn",
        "description": "the WARC/1.0 line"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the WARC-TYPE line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "the internal record key for the warcinfo record currently being built"
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "_info",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_info",
    "access": null,
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "initMdata",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#initMdata",
    "access": null,
    "description": "Begin building WARC-TYPE: metadata",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "bgn",
        "description": "the WARC/1.0 line"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the WARC-TYPE line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "the internal record key for the metadata record currently being built"
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "_mdata",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_mdata",
    "access": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "initReq",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#initReq",
    "access": null,
    "description": "Begin building WARC-TYPE: request",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "bgn",
        "description": "the WARC/1.0 line"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the WARC-TYPE line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "the internal record key for the request record currently being built"
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "_req",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_req",
    "access": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "initRes",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#initRes",
    "access": null,
    "description": "Begin building WARC-TYPE: response",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "bgn",
        "description": "the WARC/1.0 line"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the WARC-TYPE line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "the internal record key for the response record currently being built"
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "_res",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_res",
    "access": null,
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "initRevist",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#initRevist",
    "access": null,
    "description": "Begin building WARC-TYPE: revisit",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "bgn",
        "description": "the WARC/1.0 line"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the WARC-TYPE line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "the internal record key for the revisit record currently being built"
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "_rev",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_rev",
    "access": null,
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "initUnknown",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#initUnknown",
    "access": null,
    "description": "Begin building WARC-TYPE: revisit",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "bgn",
        "description": "the WARC/1.0 line"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the WARC-TYPE line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "the internal record key for the revisit record currently being built"
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "_unkown",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_unkown",
    "access": null,
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "initResource",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#initResource",
    "access": null,
    "description": "Begin building WARC-TYPE: resource",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "bgn",
        "description": "the WARC/1.0 line"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the WARC-TYPE line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "the internal record key for the resource record currently being built"
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "_resource",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_resource",
    "access": null,
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "addLineTo",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#addLineTo",
    "access": null,
    "description": "Add the current line being parsed to a record currently being built",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "the internal record key for the response record currently being built exposed by\n{@link initInfo}, {@link initMdata}, {@link initRes} and {@link initReq}"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ctrlfCount",
        "description": "the current count of Control LineFeeds between WARC Record parts"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the current line being parsed"
      }
    ]
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "buildRecord",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#buildRecord",
    "access": null,
    "description": "Build the record currently being parsed",
    "lineNumber": 270,
    "params": [
      {
        "nullable": null,
        "types": [
          "Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "the internal record key for the response record currently being built exposed by\n{@link initInfo}, {@link initMdata}, {@link initRes} and {@link initReq}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WARCInfoRecord",
        "WARCMetaDataRecord",
        "WARCRequestRecord",
        "WARCResponseRecord",
        "WARCRevisitRecord",
        "WARCUnknownRecord"
      ],
      "spread": false,
      "description": "based off the ``key`` supplied to\nthis method"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "_attemptCorrection",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_attemptCorrection",
    "access": null,
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "clear",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#clear",
    "access": null,
    "description": "Clears the builders internals. Do not call this functions unless parsing has completely finished\nthis will completely remove all information pertaining to building of the current WARC Record.\nThis method is intended to be used by the WARC parsers.",
    "lineNumber": 350,
    "params": []
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "_addInfoLine",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_addInfoLine",
    "access": "private",
    "description": "Adds the line to the correct WARC record section for warcinfo",
    "lineNumber": 380,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ctrlfCount",
        "description": "the current count of Control LineFeeds between WARC Record parts"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the current line being parsed"
      }
    ]
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "_addMdataLine",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_addMdataLine",
    "access": "private",
    "description": "Adds the line to the correct WARC record section for metadata",
    "lineNumber": 394,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ctrlfCount",
        "description": "the current count of Control LineFeeds between WARC Record parts"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the current line being parsed"
      }
    ]
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "_addReqLine",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_addReqLine",
    "access": "private",
    "description": "Adds the line to the correct WARC record section for request",
    "lineNumber": 408,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ctrlfCount",
        "description": "the current count of Control LineFeeds between WARC Record parts"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the current line being parsed"
      }
    ]
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "_addResLine",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_addResLine",
    "access": "private",
    "description": "Adds the line to the correct WARC record section for response",
    "lineNumber": 424,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ctrlfCount",
        "description": "the current count of Control LineFeeds between WARC Record parts"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the current line being parsed"
      }
    ]
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "_addRevLine",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_addRevLine",
    "access": "private",
    "description": "Adds the line to the correct WARC record section for revisit",
    "lineNumber": 440,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ctrlfCount",
        "description": "the current count of Control LineFeeds between WARC Record parts"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the current line being parsed"
      }
    ]
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "_addUnkownLine",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_addUnkownLine",
    "access": "private",
    "description": "Adds the line to the correct section for an ``unknown`` record",
    "lineNumber": 454,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ctrlfCount",
        "description": "the current count of Control LineFeeds between WARC Record parts"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the current line being parsed"
      }
    ]
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "_addResourceLine",
    "memberof": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecordBuilder/index.js~WARCRecorderBuilder#_addResourceLine",
    "access": "private",
    "description": "Adds the line to the correct WARC record section for resource",
    "lineNumber": 471,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ctrlfCount",
        "description": "the current count of Control LineFeeds between WARC Record parts"
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "the current line being parsed"
      }
    ]
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "lib/warcRecords/index.js",
    "content": "/** @ignore */\nconst {parseWarcInfoMetaDataContent, parseWarcRecordHeader, headerRe} = require('./warcContentParsers')\n\n/**\n * @desc WARC-TYPE: warcinfo\n */\nclass WARCInfoRecord {\n  /**\n   * @desc Create a new WARCInfoRecord\n   * @param {Buffer[]} headerBuffers the warc header fields\n   * @param {Buffer[]} contentBuffers the warc records contents\n   */\n  constructor (headerBuffers, contentBuffers) {\n    /**\n     * @type {Object}\n     */\n    this.warcHeader = parseWarcRecordHeader(headerBuffers)\n\n    /**\n     * @type {Object}\n     */\n    this.content = parseWarcInfoMetaDataContent(contentBuffers)\n\n    /**\n     * @type {string}\n     */\n    this.type = 'warcinfo'\n  }\n\n  /**\n   * @return {string} WARC-TYPE\n   */\n  get warcType () {\n    return this.warcHeader['WARC-Type']\n  }\n\n  /**\n   * @return {string} WARC-Filename\n   */\n  get warcFilename () {\n    return this.warcHeader['WARC-Filename']\n  }\n\n  /**\n   * @return {string} WARC-Record-ID\n   */\n  get recordId () {\n    return this.warcHeader['WARC-Record-ID']\n  }\n\n  /**\n   * @return {string} WARC-HEADER:Content-Type\n   */\n  get warcContentType () {\n    return this.warcHeader['Content-Type']\n  }\n\n  /**\n   * @return {number} WARC-HEADER:Content-Length\n   */\n  get warcContentLength () {\n    return this.warcHeader['Content-Length']\n  }\n}\n\n/**\n * @desc WARC-TYPE: metadata\n */\nclass WARCMetaDataRecord {\n  /**\n   * @desc Create a new WARCMetaDataRecord\n   * @param {Buffer[]} headerBuffers the warc header fields\n   * @param {Buffer[]} contentBuffers the warc records contents\n   */\n  constructor (headerBuffers, contentBuffers) {\n    /**\n     * @type {Object}\n     */\n    this.warcHeader = parseWarcRecordHeader(headerBuffers)\n\n    /**\n     * @type {Object}\n     */\n    this.content = parseWarcInfoMetaDataContent(contentBuffers)\n\n    /**\n     * @type {string}\n     */\n    this.type = 'metadata'\n  }\n\n  /**\n   * @return {string} WARC-TYPE\n   */\n  get warcType () {\n    return this.warcHeader['WARC-Type']\n  }\n\n  /**\n   * @return {string} WARC-Record-ID\n   */\n  get recordId () {\n    return this.warcHeader['WARC-Record-ID']\n  }\n\n  /**\n   * @return {string} WARC-Concurrent-To\n   */\n  get concurrentTo () {\n    return this.warcHeader['WARC-Concurrent-To']\n  }\n\n  /**\n   * @return {string} WARC-HEADER:Content-Type\n   */\n  get warcContentType () {\n    return this.warcHeader['Content-Type']\n  }\n\n  /**\n   * @return {number} WARC-HEADER:Content-Length\n   */\n  get warcContentLength () {\n    return this.warcHeader['Content-Length']\n  }\n}\n\n/**\n * @desc WARC-TYPE: request\n */\nclass WARCRequestRecord {\n  /**\n   * @desc Create a new WARCRequestRecord\n   * @param {Buffer[]} headerBuffers\n   * @param {Buffer[]} httpBuffers\n   * @param {Buffer[]} postBuffers\n   */\n  constructor (headerBuffers, httpBuffers, postBuffers) {\n    /**\n     * @type {string}\n     */\n    this.type = 'request'\n\n    /**\n     * @type {?string}\n     */\n    this.method = null\n\n    /**\n     * @type {?string}\n     */\n    this.requestLine = null\n\n    /**\n     * @type {?string}\n     */\n    this.httpVersion = null\n\n    /**\n     * @type {Object}\n     */\n    this.warcHeader = parseWarcRecordHeader(headerBuffers)\n\n    /**\n     * @type {Object}\n     */\n    this.httpHeaders = this._parseHttpHeaders(httpBuffers)\n\n    if (this.method && this.method.toLowerCase() === 'post') {\n      /**\n       * @desc The post data of the request. This property is only on a {@link WARCRequestRecord} if it corresponds to\n       * a post request\n       * @type {Buffer}\n       */\n      this.postBuffer = Buffer.concat(postBuffers)\n    }\n  }\n\n  /**\n   * @desc Parses the request HTTP headers\n   * @param {Buffer[]} bufs the request HTTP headers\n   * @return {Object}\n   * @private\n   */\n  _parseHttpHeaders (bufs) {\n    if (bufs.length === 0) {\n      return {}\n    }\n    let content = {}\n    let len = bufs.length\n    let i = 1\n    let line\n    let match\n    // console.log(bufs[0].toString('utf8').trim())\n    this.requestLine = bufs[0].toString('utf8').trim()\n    // disabling eslint to account for ES6 array destructuring\n    let [meth, path, httpV] = this.requestLine.split(' ') // eslint-disable-line\n    this.method = meth\n    this.httpVersion = httpV\n    let lastMatch\n    for (; i < len; ++i) {\n      line = bufs[i].toString('utf8').trim()\n      match = headerRe.exec(line)\n      if (match) {\n        let [_, m1, m2] = match // eslint-disable-line\n        content[m1] = m2\n        lastMatch = m1\n      } else {\n        // because really long set cookie and friends\n        if (lastMatch) {\n          content[lastMatch] += line\n        } else {\n          console.log('boooo WarcRequestRecord._parseHeaders', line)\n        }\n      }\n    }\n    return content\n  }\n\n  /**\n   * @return {string} WARC-Record-ID\n   */\n  get recordId () {\n    return this.warcHeader['WARC-Record-ID']\n  }\n\n  /**\n   * @return {string} WARC-Target-URI\n   */\n  get targetURI () {\n    return this.warcHeader['WARC-Target-URI']\n  }\n\n  /**\n   * @return {string} WARC-HEADER:Content-Type\n   */\n  get warcContentType () {\n    return this.warcHeader['Content-Type']\n  }\n\n  /**\n   * @return {number} WARC-HEADER:Content-Length\n   */\n  get warcContentLength () {\n    return this.warcHeader['Content-Length']\n  }\n}\n\n/**\n * @desc WARC-TYPE: response\n */\nclass WARCResponseRecord {\n  /**\n   * @desc Create a new WARCResponseRecord\n   * @param {Buffer[]} headerBuffers\n   * @param {Buffer[]} httpBuffers\n   * @param {Buffer[]} bodyBuffers\n   */\n  constructor (headerBuffers, httpBuffers, bodyBuffers) {\n    /**\n     * @type {?number}\n     */\n    this.statusCode = null\n\n    /**\n     * @type {?string}\n     */\n    this.statusReason = null\n\n    /**\n     * @type {?string}\n     */\n    this.statusLine = null\n\n    /**\n     * @type {?string}\n     */\n    this.httpVersion = null\n\n    /**\n     * @type {Object}\n     */\n    this.warcHeader = parseWarcRecordHeader(headerBuffers)\n\n    if (this.warcContentType === 'text/dns') {\n      /**\n       * @type {Object}\n       */\n      this.httpHeaders = {}\n\n      /**\n       * @type {?Buffer|?string[]}\n       */\n      this.bodyBuffer = httpBuffers.map(it => it.toString())\n    } else {\n      /**\n       * @type {Object}\n       */\n      this.httpHeaders = this._parseHttpHeaders(httpBuffers)\n\n      /**\n       * @type {?Buffer|?string[]}\n       */\n      this.bodyBuffer = Buffer.concat(bodyBuffers || [])\n    }\n\n    /**\n     * @type {string}\n     */\n    this.type = 'response'\n  }\n\n  /**\n   * @desc Parses the response HTTP headers\n   * @param {Buffer[]} bufs the response HTTP headers\n   * @return {Object}\n   * @private\n   */\n  _parseHttpHeaders (bufs) {\n    if (bufs.length === 0) {\n      return {}\n    }\n    let content = {}\n    let len = bufs.length\n    let i = 1\n    let line\n    let match\n    this.statusLine = bufs[0].toString('utf8').trim()\n    let [httpV, statusCode, statusReason] = this.statusLine.split(' ')\n    this.statusCode = parseInt(statusCode)\n    this.statusReason = statusReason\n    this.httpVersion = httpV\n    let lastMatch\n    for (; i < len; ++i) {\n      line = bufs[i].toString('utf8').trim()\n      match = headerRe.exec(line)\n      if (match) {\n        // disabling eslint to account for ES6 array destructuring\n        let [_, m1, m2] = match // eslint-disable-line\n        if (m1.toLowerCase() === 'content-length') {\n          content[m1] = parseInt(m2)\n        } else {\n          content[m1] = m2\n        }\n        lastMatch = m1\n      } else {\n        // because really long set cookie and friends\n        if (lastMatch) {\n          content[lastMatch] += line\n        } else {\n          console.log('boooo WarcResponseRecord._parseHeaders', this.warcContentType, line)\n        }\n      }\n    }\n    return content\n  }\n\n  /**\n   * @return {string} WARC-Record-ID\n   */\n  get recordId () {\n    return this.warcHeader['WARC-Record-ID']\n  }\n\n  /**\n   * @return {string} WARC-Target-URI\n   */\n  get targetURI () {\n    return this.warcHeader['WARC-Target-URI']\n  }\n\n  /**\n   * @return {string} WARC-HEADER:Content-Type\n   */\n  get warcContentType () {\n    return this.warcHeader['Content-Type']\n  }\n\n  /**\n   * @return {number} WARC-HEADER:Content-Length\n   */\n  get warcContentLength () {\n    return this.warcHeader['Content-Length']\n  }\n}\n\n/**\n * @desc WARC-TYPE: revisit\n */\nclass WARCRevisitRecord {\n  /**\n   * @desc Create a new WARCResponseRecord\n   * @param {Buffer[]} headerBuffers\n   * @param {Buffer[]} httpBuffers\n   */\n  constructor (headerBuffers, httpBuffers) {\n    /**\n     * @type {string}\n     */\n    this.type = 'revisit'\n\n    /**\n     * @type {?number}\n     */\n    this.statusCode = null\n\n    /**\n     * @type {?string}\n     */\n    this.statusReason = null\n\n    /**\n     * @type {?string}\n     */\n    this.statusLine = null\n\n    /**\n     * @type {?string}\n     */\n    this.httpVersion = null\n\n    /**\n     * @type {Object}\n     */\n    this.warcHeader = parseWarcRecordHeader(headerBuffers)\n\n    /**\n     * @type {Object}\n     */\n    this.httpHeaders = this._parseHttpHeaders(httpBuffers)\n  }\n\n  /**\n   * @desc Parses the response HTTP headers\n   * @param {Buffer[]} bufs the response HTTP headers\n   * @return {Object}\n   * @private\n   */\n  _parseHttpHeaders (bufs) {\n    if (bufs.length === 0) {\n      return {}\n    }\n    let content = {}\n    let len = bufs.length\n    let i = 1\n    let line\n    let match\n    // console.log(fl)\n    this.statusLine = bufs[0].toString('utf8').trim()\n    let [httpV, statusCode, statusReason] = this.statusLine.split(' ')\n    this.statusCode = parseInt(statusCode)\n    this.statusReason = statusReason\n    this.httpVersion = httpV\n    let lastMatch\n    for (; i < len; ++i) {\n      line = bufs[i].toString('utf8').trim()\n      match = headerRe.exec(line)\n      if (match) {\n        // disabling eslint to account for ES6 array destructuring\n        let [_, m1, m2] = match // eslint-disable-line\n        if (m1.toLowerCase() === 'content-length') {\n          content[m1] = parseInt(m2)\n        } else {\n          content[m1] = m2\n        }\n        lastMatch = m1\n      } else {\n        // because really long set cookie and friends\n        if (lastMatch) {\n          content[lastMatch] += line\n        } else {\n          console.log('boooo WARCRevisitRecord._parseHeaders', this.warcContentType, line)\n        }\n      }\n    }\n    return content\n  }\n\n  /**\n   * @return {string} WARC-Record-ID\n   */\n  get recordId () {\n    return this.warcHeader['WARC-Record-ID']\n  }\n\n  /**\n   * @return {string} WARC-Target-URI\n   */\n  get targetURI () {\n    return this.warcHeader['WARC-Target-URI']\n  }\n\n  /**\n   * @return {string} WARC-HEADER:Content-Type\n   */\n  get warcContentType () {\n    return this.warcHeader['Content-Type']\n  }\n\n  /**\n   * @return {number} WARC-HEADER:Content-Length\n   */\n  get warcContentLength () {\n    return this.warcHeader['Content-Length']\n  }\n}\n\n/**\n * @desc This class is this libraries attempt at being lenient about parsing.\n */\nclass WARCResourceRecord {\n  /**\n   * @desc Create a new WARCResponseRecord\n   * @param {Buffer[]} headerBuffers\n   * @param {Buffer[]} contentBuffers\n   */\n  constructor (headerBuffers, contentBuffers) {\n    /**\n     * @type {Object}\n     */\n    this.warcHeader = parseWarcRecordHeader(headerBuffers)\n\n    /**\n     * @type {Buffer}\n     */\n    this.contentBuffers = Buffer.concat(contentBuffers)\n\n    /**\n     * @type {string}\n     */\n    this.type = 'resource'\n  }\n}\n\n/**\n * @desc This class is this libraries attempt at being lenient about parsing.\n * This class is only used if this library cannot automatically correct the common ``off by one`` error\n * other WARC parsing libraries stop immediately at when encountered (especially during indexing).\n *\n * This library knows does not think missing a single ``CTRL-LF`` should stop you from reading a WARC\n *\n * Now if something went terribly wrong during WARC creation that's on you but we still think you should know about it by having\n * as much of that messed up data as we can parse before moving on to the next record.\n */\nclass WARCUnknownRecord {\n  /**\n   * @desc Create a new WARCResponseRecord\n   * @param {Buffer[]} headerBuffers\n   * @param {Buffer[]} otherBuffers\n   */\n  constructor (headerBuffers, ...otherBuffers) {\n    /**\n     * @type {Object}\n     */\n    this.warcHeader = parseWarcRecordHeader(headerBuffers)\n\n    /**\n     * @type {Buffer[][]}\n     */\n    this.otherBuffers = otherBuffers\n\n    /**\n     * @type {string}\n     */\n    this.type = 'unknown'\n  }\n}\n\nmodule.exports = {\n  WARCInfoRecord,\n  WARCMetaDataRecord,\n  WARCRequestRecord,\n  WARCResponseRecord,\n  WARCRevisitRecord,\n  WARCUnknownRecord,\n  WARCResourceRecord\n}\n",
    "static": true,
    "longname": "lib/warcRecords/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "parseWarcInfoMetaDataContent",
    "memberof": "lib/warcRecords/index.js",
    "static": true,
    "longname": "lib/warcRecords/index.js~parseWarcInfoMetaDataContent",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "class",
    "name": "WARCInfoRecord",
    "memberof": "lib/warcRecords/index.js",
    "static": true,
    "longname": "lib/warcRecords/index.js~WARCInfoRecord",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/index.js",
    "importStyle": null,
    "description": "WARC-TYPE: warcinfo",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 138,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/warcRecords/index.js~WARCInfoRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCInfoRecord#constructor",
    "access": null,
    "description": "Create a new WARCInfoRecord",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "headerBuffers",
        "description": "the warc header fields"
      },
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "contentBuffers",
        "description": "the warc records contents"
      }
    ]
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "warcHeader",
    "memberof": "lib/warcRecords/index.js~WARCInfoRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCInfoRecord#warcHeader",
    "access": null,
    "description": "",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "content",
    "memberof": "lib/warcRecords/index.js~WARCInfoRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCInfoRecord#content",
    "access": null,
    "description": "",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "type",
    "memberof": "lib/warcRecords/index.js~WARCInfoRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCInfoRecord#type",
    "access": null,
    "description": "",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "get",
    "name": "warcType",
    "memberof": "lib/warcRecords/index.js~WARCInfoRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCInfoRecord#warcType",
    "access": null,
    "description": "",
    "lineNumber": 33,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-TYPE"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "get",
    "name": "warcFilename",
    "memberof": "lib/warcRecords/index.js~WARCInfoRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCInfoRecord#warcFilename",
    "access": null,
    "description": "",
    "lineNumber": 40,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-Filename"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "get",
    "name": "recordId",
    "memberof": "lib/warcRecords/index.js~WARCInfoRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCInfoRecord#recordId",
    "access": null,
    "description": "",
    "lineNumber": 47,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-Record-ID"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "get",
    "name": "warcContentType",
    "memberof": "lib/warcRecords/index.js~WARCInfoRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCInfoRecord#warcContentType",
    "access": null,
    "description": "",
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-HEADER:Content-Type"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "get",
    "name": "warcContentLength",
    "memberof": "lib/warcRecords/index.js~WARCInfoRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCInfoRecord#warcContentLength",
    "access": null,
    "description": "",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "WARC-HEADER:Content-Length"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "class",
    "name": "WARCMetaDataRecord",
    "memberof": "lib/warcRecords/index.js",
    "static": true,
    "longname": "lib/warcRecords/index.js~WARCMetaDataRecord",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/index.js",
    "importStyle": null,
    "description": "WARC-TYPE: metadata",
    "lineNumber": 69,
    "interface": false
  },
  {
    "__docId__": 148,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/warcRecords/index.js~WARCMetaDataRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCMetaDataRecord#constructor",
    "access": null,
    "description": "Create a new WARCMetaDataRecord",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "headerBuffers",
        "description": "the warc header fields"
      },
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "contentBuffers",
        "description": "the warc records contents"
      }
    ]
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "warcHeader",
    "memberof": "lib/warcRecords/index.js~WARCMetaDataRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCMetaDataRecord#warcHeader",
    "access": null,
    "description": "",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "content",
    "memberof": "lib/warcRecords/index.js~WARCMetaDataRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCMetaDataRecord#content",
    "access": null,
    "description": "",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "type",
    "memberof": "lib/warcRecords/index.js~WARCMetaDataRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCMetaDataRecord#type",
    "access": null,
    "description": "",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "get",
    "name": "warcType",
    "memberof": "lib/warcRecords/index.js~WARCMetaDataRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCMetaDataRecord#warcType",
    "access": null,
    "description": "",
    "lineNumber": 95,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-TYPE"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "get",
    "name": "recordId",
    "memberof": "lib/warcRecords/index.js~WARCMetaDataRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCMetaDataRecord#recordId",
    "access": null,
    "description": "",
    "lineNumber": 102,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-Record-ID"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "get",
    "name": "concurrentTo",
    "memberof": "lib/warcRecords/index.js~WARCMetaDataRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCMetaDataRecord#concurrentTo",
    "access": null,
    "description": "",
    "lineNumber": 109,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-Concurrent-To"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "get",
    "name": "warcContentType",
    "memberof": "lib/warcRecords/index.js~WARCMetaDataRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCMetaDataRecord#warcContentType",
    "access": null,
    "description": "",
    "lineNumber": 116,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-HEADER:Content-Type"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "get",
    "name": "warcContentLength",
    "memberof": "lib/warcRecords/index.js~WARCMetaDataRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCMetaDataRecord#warcContentLength",
    "access": null,
    "description": "",
    "lineNumber": 123,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "WARC-HEADER:Content-Length"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "WARCRequestRecord",
    "memberof": "lib/warcRecords/index.js",
    "static": true,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/index.js",
    "importStyle": null,
    "description": "WARC-TYPE: request",
    "lineNumber": 131,
    "interface": false
  },
  {
    "__docId__": 158,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#constructor",
    "access": null,
    "description": "Create a new WARCRequestRecord",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "headerBuffers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "httpBuffers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "postBuffers",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "type",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#type",
    "access": null,
    "description": "",
    "lineNumber": 142,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "method",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#method",
    "access": null,
    "description": "",
    "lineNumber": 147,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "requestLine",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#requestLine",
    "access": null,
    "description": "",
    "lineNumber": 152,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "httpVersion",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#httpVersion",
    "access": null,
    "description": "",
    "lineNumber": 157,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "warcHeader",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#warcHeader",
    "access": null,
    "description": "",
    "lineNumber": 162,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "httpHeaders",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#httpHeaders",
    "access": null,
    "description": "",
    "lineNumber": 167,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "postBuffer",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#postBuffer",
    "access": null,
    "description": "The post data of the request. This property is only on a {@link WARCRequestRecord} if it corresponds to\na post request",
    "lineNumber": 175,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "_parseHttpHeaders",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#_parseHttpHeaders",
    "access": "private",
    "description": "Parses the request HTTP headers",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "bufs",
        "description": "the request HTTP headers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "requestLine",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#requestLine",
    "access": null,
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "method",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#method",
    "access": null,
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "httpVersion",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#httpVersion",
    "access": null,
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "get",
    "name": "recordId",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#recordId",
    "access": null,
    "description": "",
    "lineNumber": 223,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-Record-ID"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "get",
    "name": "targetURI",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#targetURI",
    "access": null,
    "description": "",
    "lineNumber": 230,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-Target-URI"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "get",
    "name": "warcContentType",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#warcContentType",
    "access": null,
    "description": "",
    "lineNumber": 237,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-HEADER:Content-Type"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "get",
    "name": "warcContentLength",
    "memberof": "lib/warcRecords/index.js~WARCRequestRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRequestRecord#warcContentLength",
    "access": null,
    "description": "",
    "lineNumber": 244,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "WARC-HEADER:Content-Length"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "class",
    "name": "WARCResponseRecord",
    "memberof": "lib/warcRecords/index.js",
    "static": true,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/index.js",
    "importStyle": null,
    "description": "WARC-TYPE: response",
    "lineNumber": 252,
    "interface": false
  },
  {
    "__docId__": 175,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#constructor",
    "access": null,
    "description": "Create a new WARCResponseRecord",
    "lineNumber": 259,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "headerBuffers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "httpBuffers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "bodyBuffers",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "statusCode",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#statusCode",
    "access": null,
    "description": "",
    "lineNumber": 263,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "statusReason",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#statusReason",
    "access": null,
    "description": "",
    "lineNumber": 268,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "statusLine",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#statusLine",
    "access": null,
    "description": "",
    "lineNumber": 273,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "httpVersion",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#httpVersion",
    "access": null,
    "description": "",
    "lineNumber": 278,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "warcHeader",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#warcHeader",
    "access": null,
    "description": "",
    "lineNumber": 283,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "httpHeaders",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#httpHeaders",
    "access": null,
    "description": "",
    "lineNumber": 289,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "bodyBuffer",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#bodyBuffer",
    "access": null,
    "description": "",
    "lineNumber": 294,
    "type": {
      "nullable": true,
      "types": [
        "Buffer",
        "?string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "httpHeaders",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#httpHeaders",
    "access": null,
    "description": "",
    "lineNumber": 299,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "bodyBuffer",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#bodyBuffer",
    "access": null,
    "description": "",
    "lineNumber": 304,
    "type": {
      "nullable": true,
      "types": [
        "Buffer",
        "?string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "type",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#type",
    "access": null,
    "description": "",
    "lineNumber": 310,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "_parseHttpHeaders",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#_parseHttpHeaders",
    "access": "private",
    "description": "Parses the response HTTP headers",
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "bufs",
        "description": "the response HTTP headers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "statusLine",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#statusLine",
    "access": null,
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "statusCode",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#statusCode",
    "access": null,
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "statusReason",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#statusReason",
    "access": null,
    "description": null,
    "lineNumber": 331,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "httpVersion",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#httpVersion",
    "access": null,
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "get",
    "name": "recordId",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#recordId",
    "access": null,
    "description": "",
    "lineNumber": 361,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-Record-ID"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "get",
    "name": "targetURI",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#targetURI",
    "access": null,
    "description": "",
    "lineNumber": 368,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-Target-URI"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "get",
    "name": "warcContentType",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#warcContentType",
    "access": null,
    "description": "",
    "lineNumber": 375,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-HEADER:Content-Type"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "get",
    "name": "warcContentLength",
    "memberof": "lib/warcRecords/index.js~WARCResponseRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResponseRecord#warcContentLength",
    "access": null,
    "description": "",
    "lineNumber": 382,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "WARC-HEADER:Content-Length"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "WARCRevisitRecord",
    "memberof": "lib/warcRecords/index.js",
    "static": true,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/index.js",
    "importStyle": null,
    "description": "WARC-TYPE: revisit",
    "lineNumber": 390,
    "interface": false
  },
  {
    "__docId__": 196,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#constructor",
    "access": null,
    "description": "Create a new WARCResponseRecord",
    "lineNumber": 396,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "headerBuffers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "httpBuffers",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "type",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#type",
    "access": null,
    "description": "",
    "lineNumber": 400,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "statusCode",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#statusCode",
    "access": null,
    "description": "",
    "lineNumber": 405,
    "type": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "statusReason",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#statusReason",
    "access": null,
    "description": "",
    "lineNumber": 410,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "statusLine",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#statusLine",
    "access": null,
    "description": "",
    "lineNumber": 415,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "httpVersion",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#httpVersion",
    "access": null,
    "description": "",
    "lineNumber": 420,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "warcHeader",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#warcHeader",
    "access": null,
    "description": "",
    "lineNumber": 425,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "httpHeaders",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#httpHeaders",
    "access": null,
    "description": "",
    "lineNumber": 430,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "_parseHttpHeaders",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#_parseHttpHeaders",
    "access": "private",
    "description": "Parses the response HTTP headers",
    "lineNumber": 439,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "bufs",
        "description": "the response HTTP headers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "statusLine",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#statusLine",
    "access": null,
    "description": null,
    "lineNumber": 449,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "statusCode",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#statusCode",
    "access": null,
    "description": null,
    "lineNumber": 451,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "statusReason",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#statusReason",
    "access": null,
    "description": null,
    "lineNumber": 452,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "httpVersion",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#httpVersion",
    "access": null,
    "description": null,
    "lineNumber": 453,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "get",
    "name": "recordId",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#recordId",
    "access": null,
    "description": "",
    "lineNumber": 482,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-Record-ID"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "get",
    "name": "targetURI",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#targetURI",
    "access": null,
    "description": "",
    "lineNumber": 489,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-Target-URI"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "get",
    "name": "warcContentType",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#warcContentType",
    "access": null,
    "description": "",
    "lineNumber": 496,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "WARC-HEADER:Content-Type"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "get",
    "name": "warcContentLength",
    "memberof": "lib/warcRecords/index.js~WARCRevisitRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCRevisitRecord#warcContentLength",
    "access": null,
    "description": "",
    "lineNumber": 503,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "WARC-HEADER:Content-Length"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "WARCResourceRecord",
    "memberof": "lib/warcRecords/index.js",
    "static": true,
    "longname": "lib/warcRecords/index.js~WARCResourceRecord",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/index.js",
    "importStyle": null,
    "description": "This class is this libraries attempt at being lenient about parsing.",
    "lineNumber": 511,
    "interface": false
  },
  {
    "__docId__": 214,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/warcRecords/index.js~WARCResourceRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResourceRecord#constructor",
    "access": null,
    "description": "Create a new WARCResponseRecord",
    "lineNumber": 517,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "headerBuffers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "contentBuffers",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "warcHeader",
    "memberof": "lib/warcRecords/index.js~WARCResourceRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResourceRecord#warcHeader",
    "access": null,
    "description": "",
    "lineNumber": 521,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "contentBuffers",
    "memberof": "lib/warcRecords/index.js~WARCResourceRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResourceRecord#contentBuffers",
    "access": null,
    "description": "",
    "lineNumber": 526,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "type",
    "memberof": "lib/warcRecords/index.js~WARCResourceRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCResourceRecord#type",
    "access": null,
    "description": "",
    "lineNumber": 531,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "class",
    "name": "WARCUnknownRecord",
    "memberof": "lib/warcRecords/index.js",
    "static": true,
    "longname": "lib/warcRecords/index.js~WARCUnknownRecord",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/index.js",
    "importStyle": null,
    "description": "This class is this libraries attempt at being lenient about parsing.\nThis class is only used if this library cannot automatically correct the common ``off by one`` error\nother WARC parsing libraries stop immediately at when encountered (especially during indexing).\n\nThis library knows does not think missing a single ``CTRL-LF`` should stop you from reading a WARC\n\nNow if something went terribly wrong during WARC creation that's on you but we still think you should know about it by having\nas much of that messed up data as we can parse before moving on to the next record.",
    "lineNumber": 545,
    "interface": false
  },
  {
    "__docId__": 219,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/warcRecords/index.js~WARCUnknownRecord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCUnknownRecord#constructor",
    "access": null,
    "description": "Create a new WARCResponseRecord",
    "lineNumber": 551,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "headerBuffers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "otherBuffers",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "warcHeader",
    "memberof": "lib/warcRecords/index.js~WARCUnknownRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCUnknownRecord#warcHeader",
    "access": null,
    "description": "",
    "lineNumber": 555,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "otherBuffers",
    "memberof": "lib/warcRecords/index.js~WARCUnknownRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCUnknownRecord#otherBuffers",
    "access": null,
    "description": "",
    "lineNumber": 560,
    "type": {
      "nullable": null,
      "types": [
        "Buffer[][]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "type",
    "memberof": "lib/warcRecords/index.js~WARCUnknownRecord",
    "static": false,
    "longname": "lib/warcRecords/index.js~WARCUnknownRecord#type",
    "access": null,
    "description": "",
    "lineNumber": 565,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "lib/warcRecords/warcContentParsers.js",
    "content": "/**\n * @desc Capture ``(key):\\s(value)`` separated pairs\n * @type {RegExp}\n */\nconst headerRe = /([^:]+):\\s(.+)/\n\n/**\n * @desc Capture the WARC Record Id or WARC Concurrent To Id\n * @type {RegExp}\n */\nconst recIdRE = /<[a-z]+:[a-z]+:([^>]+)>/\n\n/**\n * @desc Parse a WARC Records headers not HTTP Header parser\n * @param {Buffer[]} bufs the WARC Records header lines\n * @return {Object}\n */\nfunction parseWarcRecordHeader (bufs) {\n  let rheader = {}\n  let len = bufs.length\n  let i = 1\n  let line\n  let match\n  line = bufs[0].toString('utf8').trim()\n  rheader['WARC'] = line.slice(line.indexOf('/') + 1)\n  for (; i < len; ++i) {\n    line = bufs[i].toString('utf8').trim()\n    match = headerRe.exec(line)\n    if (match) {\n      // disabling eslint to account for ES6 array destructuring\n      let [str, m1, m2] = match // eslint-disable-line\n      if (m1 === 'WARC-Record-ID' || m1 === 'WARC-Concurrent-To') {\n        let [_, id] = recIdRE.exec(m2) // eslint-disable-line\n        rheader[m1] = id\n      } else if (m1 === 'Content-Length') {\n        rheader[m1] = parseInt(m2)\n      } else {\n        rheader[m1] = m2\n      }\n    } else {\n      console.log('boooo parseWarcRecordHeader', line)\n    }\n  }\n  return rheader\n}\n\n/**\n * @desc Parse a WARC Metadata records metadata content\n * @param {Buffer[]} bufs the WARC Metadata records content lines\n * @return {Object}\n */\nfunction parseWarcInfoMetaDataContent (bufs) {\n  let content = {}\n  let len = bufs.length\n  let i = 0\n  let line\n  let match\n  for (; i < len; ++i) {\n    line = bufs[i].toString('utf8').trim()\n    match = headerRe.exec(line)\n    if (match) {\n      // disabling eslint to account for ES6 array destructuring\n      let [str, m1, m2] = match // eslint-disable-line\n      if (m1 === 'outlink') {\n        if (!content[m1]) {\n          content[m1] = []\n        }\n        content[m1].push(m2)\n      } else {\n        content[m1] = m2\n      }\n    } else {\n      content[line] = ''\n    }\n  }\n  return content\n}\n\nmodule.exports = {\n  headerRe,\n  recIdRE,\n  parseWarcInfoMetaDataContent,\n  parseWarcRecordHeader\n}\n",
    "static": true,
    "longname": "lib/warcRecords/warcContentParsers.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "headerRe",
    "memberof": "lib/warcRecords/warcContentParsers.js",
    "static": true,
    "longname": "lib/warcRecords/warcContentParsers.js~headerRe",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/warcContentParsers.js",
    "importStyle": null,
    "description": "Capture ``(key):\\s(value)`` separated pairs",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "recIdRE",
    "memberof": "lib/warcRecords/warcContentParsers.js",
    "static": true,
    "longname": "lib/warcRecords/warcContentParsers.js~recIdRE",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/warcContentParsers.js",
    "importStyle": null,
    "description": "Capture the WARC Record Id or WARC Concurrent To Id",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "parseWarcRecordHeader",
    "memberof": "lib/warcRecords/warcContentParsers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/warcRecords/warcContentParsers.js~parseWarcRecordHeader",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/warcContentParsers.js",
    "importStyle": null,
    "description": "Parse a WARC Records headers not HTTP Header parser",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "bufs",
        "description": "the WARC Records header lines"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 227,
    "kind": "function",
    "name": "parseWarcInfoMetaDataContent",
    "memberof": "lib/warcRecords/warcContentParsers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/warcRecords/warcContentParsers.js~parseWarcInfoMetaDataContent",
    "access": null,
    "export": false,
    "importPath": "node-warc/lib/warcRecords/warcContentParsers.js",
    "importStyle": null,
    "description": "Parse a WARC Metadata records metadata content",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "bufs",
        "description": "the WARC Metadata records content lines"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 229,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 230,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 233,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 238,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 239,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 240,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 241,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 242,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 243,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 244,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 247,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 248,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 249,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 250,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 251,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 252,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 257,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 258,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 265,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 267,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 277,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 278,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 279,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 280,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 281,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 282,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]